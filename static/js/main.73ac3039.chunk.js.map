{"version":3,"sources":["Header.js","context/AppReducer.js","context/GlobalState.js","Balance.js","IncomeExpenses.js","Transaction.js","TransactionList.js","AddTransaction.js","App.js","reportWebVitals.js","index.js"],"names":["Header","state","action","type","transactions","filter","transaction","id","payload","initialState","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","Provider","value","deleteTransaction","addTransaction","Balance","total","useContext","map","amount","reduce","acc","item","toFixed","IncomeExpenses","amounts","income","expense","className","Transaction","sign","text","Math","abs","onClick","class","TransactionList","AddTransaction","useState","setText","setAmount","onSubmit","e","preventDefault","newTransaction","floor","random","htmlfor","onChange","target","placeholder","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.73ac3039.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const Header = () => {\r\n  return (\r\n    <h2>\r\n      Expense Tracker\r\n    </h2>\r\n  )\r\n}\r\n","export default (state, action) => {\r\n  switch(action.type) {\r\n    case 'DELETE_TRANSACTION':\r\n      return {\r\n        ...state,\r\n        transactions: state.transactions.filter(transaction => transaction.id !== action.payload)\r\n      }\r\n       case 'ADD_TRANSACTION':\r\n      return {\r\n        ...state,\r\n        transactions: [action.payload,...state.transactions]\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n} ","import React, { createContext, useReducer } from 'react';\r\nimport AppReducer from './AppReducer';\r\n//Initial state\r\nconst initialState = {\r\n  transactions: []\r\n}\r\n\r\n//Create context\r\nexport const GlobalContext = createContext(initialState);\r\n\r\n//Provider component\r\nexport const GlobalProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(AppReducer, initialState);\r\n\r\n  //Actions\r\n  function deleteTransaction(id) {\r\n    dispatch({\r\n      type: 'DELETE_TRANSACTION',\r\n      payload: id\r\n    });\r\n  }\r\n\r\n  function addTransaction(transaction) {\r\n    dispatch({\r\n      type: 'ADD_TRANSACTION',\r\n      payload: transaction\r\n    });\r\n  }\r\n  return (<GlobalContext.Provider value={{\r\n    transactions: state.transactions,\r\n    deleteTransaction,\r\n    addTransaction\r\n  }}>\r\n  {children}\r\n  </GlobalContext.Provider>);\r\n}","import React, {useContext} from 'react'\r\nimport { GlobalContext } from './context/GlobalState';\r\nexport const Balance = () => {\r\n  const { transactions } = useContext(GlobalContext);\r\n  const amounts = transactions.map(transaction => transaction.amount);\r\n  const total = amounts.reduce((acc, item) => (acc += item), 0).toFixed(2);\r\n  \r\n  return (\r\n    <>\r\n      <h4>Your Balance</h4>\r\n      <h1>{total}</h1>\r\n    </>\r\n  )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { GlobalContext } from './context/GlobalState';\r\nexport const IncomeExpenses = () => {\r\n     const { transactions } = useContext(GlobalContext);\r\n     const amounts = transactions.map(transaction => transaction.amount);\r\n     const income = amounts\r\n    .filter(item => item > 0)\r\n    .reduce((acc, item) => (acc += item), 0)\r\n    .toFixed(2);\r\n\r\n  const expense = (\r\n    amounts.filter(item => item < 0).reduce((acc, item) => (acc += item), 0) *\r\n    -1\r\n  ).toFixed(2); \r\n\r\n    return (\r\n    <div className=\"inc-exp-container\">\r\n        <div>\r\n          <h4>Income</h4>\r\n          <p className=\"money plus\">{income}</p>\r\n        </div>\r\n        <div>\r\n          <h4>Expense</h4>\r\n          <p className=\"money minus\">{expense}</p>\r\n        </div>\r\n      </div>\r\n  )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { GlobalContext } from './context/GlobalState';\r\nexport const Transaction = ({transaction}) => {\r\n  const { deleteTransaction } = useContext(GlobalContext); \r\n  const sign = transaction.amount < 0 ? '-' : '+';\r\n  return (\r\n    <li className={transaction.amount < 0 ? 'minus' : 'plus'}>\r\n         {transaction.text} <span>{sign}${Math.abs(transaction.amount)}</span><button onClick={() => deleteTransaction(transaction.id)} class=\"delete-btn\">x</button>\r\n        </li>\r\n  )\r\n}\r\n","import React,{ useContext } from 'react'\r\nimport { GlobalContext } from './context/GlobalState';\r\nimport { Transaction } from './Transaction';\r\nexport const TransactionList = () => {\r\nconst { transactions } = useContext(GlobalContext);\r\n\r\n\r\n  return (\r\n    <>\r\n      <h3>History</h3>\r\n      <ul className=\"list\">\r\n        {transactions.map(transaction => (<Transaction key={transaction.id} transaction={transaction} />))}\r\n      </ul>\r\n    </>\r\n  )\r\n}\r\n","import React,{ useState, useContext }from 'react'\r\nimport { GlobalContext } from './context/GlobalState';\r\nexport const AddTransaction = () => {\r\n  const [text,setText] = useState('');\r\n  const [amount,setAmount] = useState(0);\r\n  const { addTransaction } = useContext(GlobalContext); \r\n  \r\n  const onSubmit = e => {\r\n    e.preventDefault();\r\n    const newTransaction = {\r\n      id: Math.floor(Math.random() * 100000000),\r\n      text,\r\n      amount: +amount\r\n    }\r\n    addTransaction(newTransaction);\r\n  }\r\n  \r\n  return (\r\n    <>\r\n        <h3>Add new transaction</h3>\r\n      <form onSubmit={onSubmit}>\r\n        <div class=\"form-control\">\r\n          <label htmlfor=\"text\">Text</label>\r\n          <input type=\"text\" value={text} onChange={(e) => setText(e.target.value)} placeholder=\"Enter text...\" />\r\n        </div>\r\n        <div class=\"form-control\">\r\n          <label htmlfor=\"amount\"\r\n            >Amount <br />\r\n            (negative - expense, positive - income)</label\r\n          >\r\n          <input type=\"number\" value={amount} onChange={(e) => setAmount(e.target.value)} placeholder=\"Enter amount...\" />\r\n        </div>\r\n        <button class=\"btn\">Add transaction</button>\r\n      </form>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react';\nimport { Header } from './Header';\nimport './App.css';\nimport { Balance } from './Balance';\nimport { IncomeExpenses } from './IncomeExpenses';\nimport { TransactionList } from './TransactionList';\nimport { AddTransaction } from './AddTransaction';\nimport { GlobalProvider } from './context/GlobalState';\nfunction App() {\n  return (\n    <GlobalProvider>\n     <Header />\n     <div className=\"container\">\n       <Balance />\n       <IncomeExpenses />\n       <TransactionList />\n       <AddTransaction />\n     </div>\n    </GlobalProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}